@font-face {
    font-family: 'GangwonEduPowerExtraBoldA';
    src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_2201-2@1.0/GangwonEduPowerExtraBoldA.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}
@font-face {
    font-family: 'GangwonEduSaeeum_OTFMediumA';
    src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_2201-2@1.0/GangwonEduSaeeum_OTFMediumA.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}
@font-face {
    font-family: 'GangwonEdu_OTFBoldA';
    src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_2201-2@1.0/GangwonEdu_OTFBoldA.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

#hero {
  width: 100vw;
  background: black;
  overflow: hidden;
  position: relative;
  display: flex;
  justify-content: center;
    /* ✅ 양옆에 여백(패딩)을 추가합니다. */
  padding: 10px 40px 0; /* 세로 0, 가로 20px. 원하는 만큼 조절하세요. */

  /* ✅ padding이 width에 포함되도록 box-sizing을 변경합니다. */
  box-sizing: border-box;
}


.video-wrapper {
  /* 1. wrapper는 이제 영상의 '최대 너비'와 '중앙 정렬'만 담당합니다. */
  max-width: 450px; /* 여기서 영상의 최대 너비를 설정합니다. */
  width: 100%;      /* 기본적으로는 꽉 찬 너비를 가집니다. */
  margin: 0 auto;   /* 중앙 정렬 */

  /* 2. 초기 숨김 및 나타나는 효과는 그대로 유지합니다. */
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.5s ease-in-out;
}

/* JS가 이 클래스를 추가하면 영상이 나타남 */
.video-wrapper.is-playing {
  opacity: 1;
  pointer-events: auto;
}

/* 3. iframe 자체가 크기와 비율을 결정합니다. */
.video-wrapper iframe {
  /* 너비는 wrapper를 꽉 채웁니다. (결과적으로 max-width: 500px가 적용됨) */
  width: 100%; 
  
  /* [핵심] iframe의 세로-가로 비율을 16:9 (쇼츠 비율)로 고정합니다. */
  /* 이제 height는 자동으로 계산됩니다! */
  aspect-ratio: 9 / 19; 
  
  /* 나머지 스타일 */
  display: block;   /* 불필요한 여백 제거 */
  border: 0;        /* 테두리 제거 */
  background: black;
}

.main-video-overlay {
  position: absolute;
  top: 0; left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: opacity 0.3s ease;
}

/* JS가 이 클래스를 추가하면 오버레이가 완전히 사라짐 */
.main-video-overlay.is-hidden {
  display: none;
}

/*
 * ✅ 핵심 수정 구간 끝
 */


.hero-box {
  color: white;
  text-align: center;
  pointer-events: auto; /* 버튼 클릭 가능하게 */
}
.hero-title {
  font-size: 3rem;
  font-weight: bold;
  margin: 15px 0;
  font-family: 'GangwonEduPowerExtraBoldA', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
.hero-text {
  font-size: 1.3rem;
  margin-bottom: 0px;
  font-family: 'GangwonEdu_OTFBoldA', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
.hero-btn {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  margin: 20px 0 0 0;
}
.mainbtn {
  display: flex;
  justify-content: center;
  width: 120px;
  height: 40px;
  align-items: center;
  text-decoration: none;
  margin: 0 15px;
  color: #ffffff;
  background-color: transparent;
  padding: 0px 20px;
}
.mainbtn:hover {
  border-radius: 20px;
  background-color: white;
  color: black;
}
.party-apply-btn-wrapper {
  margin-top: 80px;
}

.party-apply-btn {
  font-family: 'GangwonEduPowerExtraBoldA', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  font-size: 20px;
  line-height: 1.2;
  background-color: transparent;
  border: 1px solid #ffffff;
  border-radius: 20px;
  color: #fff;
  padding: 15px 30px 12px 30px;
  margin-top: 80px;
  cursor: pointer;
  text-decoration: none;
}
.party-apply-btn-only {
  text-decoration: none;
  color: #fff;
}

.party-apply-btn:hover {
  background-color: #fff;
  color: black;
}

.hot {
  color: rgb(196, 66, 66);
}

/* --- 애니메이션 부분 (변경 없음) --- */
.boingInUp {
  -webkit-animation-name: boingInUp;
  animation-name: boingInUp;
  -webkit-animation-duration: 1s;
  animation-duration: 1s;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both;
  animation-timing-function: ease-out;
}
@-webkit-keyframes boingInUp {
  0% {
    opacity: 0;
    -webkit-transform-origin: 50% 0%;
    transform-origin: 50% 0%;
    -webkit-transform: perspective(800px) rotateX(-90deg);
    transform: perspective(800px) rotateX(-90deg);
  }
  50% {
    opacity: 1;
    -webkit-transform-origin: 50% 0%;
    transform-origin: 50% 0%;
    -webkit-transform: perspective(800px) rotateX(50deg);
    transform: perspective(800px) rotateX(50deg);
  }
  100% {
    opacity: 1;
    -webkit-transform-origin: 50% 0%;
    transform-origin: 50% 0%;
    -webkit-transform: perspective(800px) rotateX(0deg);
    transform: perspective(800px) rotateX(0deg);
  }
}
@keyframes boingInUp {
  0% {
    opacity: 0;
    -webkit-transform-origin: 50% 0%;
    transform-origin: 50% 0%;
    -webkit-transform: perspective(800px) rotateX(-90deg);
    transform: perspective(800px) rotateX(-90deg);
  }
  50% {
    opacity: 1;
    -webkit-transform-origin: 50% 0%;
    transform-origin: 50% 0%;
    -webkit-transform: perspective(800px) rotateX(50deg);
    transform: perspective(800px) rotateX(50deg);
  }
  100% {
    opacity: 1;
    -webkit-transform-origin: 50% 0%;
    transform-origin: 50% 0%;
    -webkit-transform: perspective(800px) rotateX(0deg);
    transform: perspective(800px) rotateX(0deg);
  }
}
.delay-0 {
  animation-delay: 0s;
}
.delay-1 {
  animation-delay: 0.5s;
}
.delay-2 {
  animation-delay: 1.0s;
}
.delay-3 {
  animation-delay: 1.5s;
}

/* 
 ✅ [가장 중요] Animate.css의 bounceInDown을 덮어쓰는 커스텀 애니메이션
*/
@keyframes custom-bounceInDown {
  0% {
    opacity: 0;
    /* 시작 높이를 -3000px에서 -100px로 대폭 낮춤 */
    transform: translateY(-100px) scaleY(0.6); 
  }

  /* 
   * 나머지 통통 튀는 부분은 그대로 유지하거나, 
   * 취향에 맞게 수치를 조금씩 조절할 수 있습니다.
   */
  60% {
    opacity: 1;
    transform: translateY(25px) scaleY(1);
  }

  75% {
    transform: translateY(-10px) scaleY(0.95);
  }

  90% {
    transform: translateY(5px) scaleY(0.985);
  }

  100% {
    transform: translateY(0) scaleY(1);
  }
}

/* 
 ✅ 커스텀 애니메이션을 사용할 클래스를 만듭니다.
*/
.animate__custom-bounceInDown {
  /* 위에서 만든 @keyframes 애니메이션을 참조합니다. */
  animation-name: custom-bounceInDown;
}

/* 
 ✅ [추가] "오른쪽으로 통통 튀는" 커스텀 애니메이션
*/
@keyframes custom-boing-right {
  /* 시작과 끝은 제자리 */
  0%, 100% {
    transform: translateX(0);
  }

  /* 오른쪽으로 살짝 갔다가 */
  20% {
    transform: translateX(6px);
  }

  /* 반대쪽으로 살짝 튕겼다가 */
  40% {
    transform: translateX(0px);
  }

  /* 다시 오른쪽으로 갔다가 */
  60% {
    transform: translateX(6px);
  }

  /* 제자리로 돌아옵니다. */
  80% {
    transform: translateX(0px);
  }
}

/* 
 ✅ 이 애니메이션을 실행할 클래스를 만듭니다.
*/
.animate__custom-boing-right {
  animation-name: custom-boing-right;
  /* transform-origin을 설정하여 움직임의 중심을 잡아줍니다. */
  transform-origin: center center;
}

/* 
 ✅ [가장 중요] 모든 Animate.css 효과의 지속 시간을 우리가 원하는 값으로 통일합니다.
    이렇게 하면 어떤 효과를 쓰든 항상 동일한 속도로 작동하여 예측이 가능해집니다.
*/
.hero-box .animate__animated {
    animation-duration: 0.7s; /* 0.7초로 설정. 원하는 속도로 조절 가능 */
}

/* 
 ✅ [선택적] 특정 애니메이션만 속도를 다르게 하고 싶을 경우 
    더 구체적인 선택자를 사용하여 덮어쓸 수 있습니다.
*/
.hero-box .animate__custom-boing-right {
    animation-duration: 0.8s; /* 통통 튀는 효과는 약간 더 길게 */
}

/* 스크롤 다운 화살표를 담는 컨테이너 */
.scroll-down-container {
  position: absolute; /* hero 섹션 기준으로 위치 지정 */
  bottom: 30px;       /* 화면 하단에서 30px 위 */
  left: 50%;          /* 수평 중앙 정렬 */
  transform: translateX(-50%);
  z-index: 10;        /* 다른 요소들 위에 보이도록 */
  cursor: pointer;    /* 마우스를 올리면 클릭 가능하게 */

}

/* 실제 화살표 모양 (border 속성을 이용한 트릭) */
.scroll-down-arrow {
  width: 20px;
  height: 20px;
  border: 4px solid white;
  border-width: 0 4px 4px 0; /* 위, 왼쪽 테두리는 숨김 */
  transform: rotate(45deg);  /* 45도 회전하여 화살표 모양 생성 */
  opacity: 0;                /* 처음엔 숨김 */
  animation: bounce-arrow 2s infinite, fade-in-arrow 1s 3s forwards;
  /* 
    bounce-arrow: 2초 동안 무한 반복되는 통통 튀는 애니메이션
    fade-in-arrow: 3초 지연 후 1초 동안 서서히 나타나는 애니메이션 (forwards는 마지막 상태 유지)
  */
}

/* 통통 튀는 애니메이션 정의 */
@keyframes bounce-arrow {
  0%, 20%, 50%, 80%, 100% {
    transform: translateY(0) rotate(45deg);
  }
  40% {
    transform: translateY(-20px) rotate(45deg);
  }
  60% {
    transform: translateY(-10px) rotate(45deg);
  }
}

/* 서서히 나타나는 애니메이션 정의 */
@keyframes fade-in-arrow {
  from {
    opacity: 0;
  }
  to {
    opacity: 0.8;
  }
}